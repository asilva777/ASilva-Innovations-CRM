# AIMPACT Backend Initialization (FastAPI + PostgreSQL)

# 1. Folder Structure
# --------------------
# aimapact-backend/
# ├── app/
# │   ├── __init__.py
# │   ├── main.py
# │   ├── models.py
# │   ├── schemas.py
# │   ├── crud.py
# │   └── database.py
# ├── .env
# ├── requirements.txt
# └── README.md

# 2. requirements.txt
# --------------------
fastapi
uvicorn
sqlalchemy
psycopg2-binary
python-dotenv

# 3. .env (Do NOT expose publicly)
# --------------------
# DATABASE_URL=postgresql://user:password@localhost/aimpact

# 4. app/database.py
# --------------------
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Dependency

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# 5. app/models.py
# --------------------
from sqlalchemy import Column, Integer, String, Float
from .database import Base

class Metric(Base):
    __tablename__ = "metrics"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    value = Column(Float)
    category = Column(String)

# 6. app/schemas.py
# --------------------
from pydantic import BaseModel

class MetricBase(BaseModel):
    name: str
    value: float
    category: str

class MetricCreate(MetricBase):
    pass

class Metric(MetricBase):
    id: int

    class Config:
        orm_mode = True

# 7. app/crud.py
# --------------------
from sqlalchemy.orm import Session
from . import models, schemas

def get_metrics(db: Session, category: str):
    return db.query(models.Metric).filter(models.Metric.category == category).all()

def create_metric(db: Session, metric: schemas.MetricCreate):
    db_metric = models.Metric(**metric.dict())
    db.add(db_metric)
    db.commit()
    db.refresh(db_metric)
    return db_metric

# 8. app/main.py
# --------------------
from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
from . import crud, models, schemas
from .database import engine, Base, get_db

Base.metadata.create_all(bind=engine)

app = FastAPI()

@app.get("/metrics/{category}", response_model=list[schemas.Metric])
def read_metrics(category: str, db: Session = Depends(get_db)):
    return crud.get_metrics(db, category)

@app.post("/metrics/", response_model=schemas.Metric)
def add_metric(metric: schemas.MetricCreate, db: Session = Depends(get_db)):
    return crud.create_metric(db, metric)

# 9. Run Server
# --------------------
# uvicorn app.main:app --reload
